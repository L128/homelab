# k8s-monitoring/Values.yaml
cluster:
  name: k3s-homelab  # 与现有集群名称一致（需修改为实际集群名）

# 数据目标：指向已部署的存储/可视化组件
destinations:
  # 1. 发送metrics到本地Prometheus（kube-prometheus-stack部署）
  - name: localPrometheus
    type: prometheus
    url: http://kube-prometheus-stack-prometheus.monitoring.svc.cluster.local:9090  # 修正Prometheus服务地址
    auth:
      type: none  # 若Prometheus启用认证，需添加对应配置（如basic auth）

  # 2. 发送logs到本地Loki（已部署的Loki服务）
  - name: localLoki
    type: loki
    url: http://loki.monitoring.svc.cluster.local:3100/loki/api/v1/push  # 使用集群内部服务地址（更可靠）
    # 若Loki启用认证，添加：
    # auth:
    #   type: basic
    #   username: "${LOKI_USERNAME}"
    #   password: "${LOKI_PASSWORD}"

  # 3. 发送traces到本地Tempo（已部署的Tempo服务）
  - name: localTempo
    type: otlp
    url: http://tempo.monitoring.svc.cluster.local:4317/v1/traces  # Tempo的OTLP gRPC端口
    traces: { enabled: true }  # 仅启用追踪数据发送

# 启用必要的监控功能（官网推荐核心功能）
clusterMetrics:
  enabled: true  # 采集集群级metrics（节点、命名空间等）

clusterEvents:
  enabled: true  # 采集Kubernetes事件（如Pod创建/删除）

nodeLogs:
  enabled: true  # 采集节点日志（依赖Alloy的日志挂载配置）

podLogs:
  enabled: true  # 采集Pod日志
  podLogsViaKubernetesApi:
    enabled: true  # 通过K8s API采集Pod日志（减轻节点压力）

applicationObservability:
  enabled: true  # 应用可观测性（自动发现应用并采集数据）

# 与Alloy协同（已部署Alloy作为采集器）
alloy-metrics:
  enabled: true  # 启用Alloy的metrics采集
alloy-logs:
  enabled: true  # 启用Alloy的logs采集
alloy-receiver:
  enabled: true  # 允许Alloy接收k8s-monitoring的数据

# 自动 instrumentation（为应用注入监控探针）
autoInstrumentation:
  enabled: true
  # 可选：指定需要自动注入的命名空间
  # namespaces:
  #   - default
  #   - app

# 服务发现（基于注解自动发现监控目标）
annotationAutodiscovery:
  enabled: true  # 启用基于注解的服务发现（如`monitoring.grafana.com/scrape: "true"`）

# 持久化与资源配置（按需调整）
resources:
  requests:
    cpu: "50m"
    memory: "128Mi"
  limits:
    cpu: "500m"
    memory: "512Mi"