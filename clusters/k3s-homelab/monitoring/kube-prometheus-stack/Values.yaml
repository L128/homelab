crd:
  install: true  # 允许 Helm 安装/升级 CRD
  upgrade: true
  
# 统一配置所有组件的PVC，使用longhorn存储类
alertmanager:
  alertmanagerSpec:
    volumeClaimTemplate:
      spec:
        storageClassName: "longhorn"  # 使用longhorn存储类
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 50Gi  # Alertmanager存储容量
    # PVC保留策略（可选，K8s 1.27+支持）
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain

prometheus:
  prometheusSpec:
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: "longhorn"  # 使用longhorn存储类
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 100Gi  # Prometheusetheus存储容量（建议更大）
    # PVC保留策略（可选，K8s 1.27+支持）
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
  additionalServiceMonitors:
    ###########################################################################
    # 1. k8s-monitoring-node-exporter（节点级指标，已提供模板，此处保留并补全）
    ###########################################################################
    - name: k8s-monitoring-node-exporter
      namespace: monitoring  # 与 Prometheus 同命名空间（通常为 monitoring）
      selector:
        # 匹配 node-exporter Service 的标签（需与集群实际标签一致，可通过 kubectl get svc -n monitoring 查看）
        matchLabels:
          app.kubernetes.io/name: node-exporter
          app.kubernetes.io/instance: k8s-monitoring  # 对应 k8s-monitoring Chart 的实例名
      namespaceSelector:
        # 目标 Service 所在命名空间（k8s-monitoring 组件默认部署在 monitoring）
        matchNames:
          - monitoring
      endpoints:
        - port: metrics  # 对应 node-exporter Service 的端口名（默认是 metrics）
          interval: 15s  # 指标抓取间隔（根据需求调整，15s 为常规选择）
          path: /metrics  # node-exporter 默认指标路径
          scrapeTimeout: 10s  # 抓取超时（避免阻塞，建议小于 interval）

    ###########################################################################
    # 2. k8s-monitoring-kube-state-metrics（K8s 资源对象指标）
    ###########################################################################
    - name: k8s-monitoring-kube-state-metrics
      namespace: monitoring
      selector:
        matchLabels:
          app.kubernetes.io/name: kube-state-metrics
          app.kubernetes.io/instance: k8s-monitoring
      namespaceSelector:
        matchNames:
          - monitoring
      endpoints:
        - port: http  # kube-state-metrics 默认端口名（非 https 场景）
          interval: 15s
          path: /metrics  # 默认指标路径
          scrapeTimeout: 10s

    ###########################################################################
    # 4. k8s-monitoring-alloy-metrics（Alloy 指标处理模块，StatefulSet）
    ###########################################################################
    - name: k8s-monitoring-alloy-metrics
      namespace: monitoring
      selector:
        matchLabels:
          app.kubernetes.io/name: alloy-metrics
          app.kubernetes.io/instance: k8s-monitoring-alloy-metrics
      namespaceSelector:
        matchNames:
          - monitoring
      endpoints:
        - port: http-metrics  # Alloy metrics 组件默认端口名
          interval: 15s
          path: /metrics  # 暴露 Alloy 自身运行状态及转发的指标
          scrapeTimeout: 10s

    ###########################################################################
    # 5. k8s-monitoring-alloy-singleton（Alloy 单例组件，处理全局任务）
    ###########################################################################
    - name: k8s-monitoring-alloy-singleton
      namespace: monitoring
      selector:
        matchLabels:
          app.kubernetes.io/name: alloy-singleton
          app.kubernetes.io/instance: k8s-monitoring-alloy-singleton
      namespaceSelector:
        matchNames:
          - monitoring
      endpoints:
        - port: http-metrics  # Alloy singleton 组件默认端口名
          interval: 15s
          path: /metrics  # 暴露全局任务（如聚合指标）的运行状态
          scrapeTimeout: 10s

    ###########################################################################
    # 6. k8s-monitoring-alloy-operator（Alloy 控制器，管理 Alloy 实例）
    ###########################################################################
    - name: k8s-monitoring-alloy-operator
      namespace: monitoring
      selector:
        matchLabels:
          app.kubernetes.io/name: alloy-operator
          app.kubernetes.io/instance: k8s-monitoring
      namespaceSelector:
        matchNames:
          - monitoring
      endpoints:
        - port: metrics  # Operator 默认端口名（暴露控制器运行指标）
          interval: 30s  # Operator 指标变化较慢，可适当延长间隔
          path: /metrics  # 默认指标路径（如 reconcile 次数、实例状态）
          scrapeTimeout: 10s
  additionalPodMonitors:
    - name: k8s-monitoring-beyla
      namespace: monitoring
      selector:
        matchLabels:
          app.kubernetes.io/name: beyla
          app.kubernetes.io/instance: k8s-monitoring
      podMetricsEndpoints:
        - port: metrics  # 对应 Beyla Pod 的 metrics 端口
          interval: 15s
          path: /metrics
  additionalScrapeConfigs:
    # 抓取 Loki Pod 的监控指标
    - job_name: 'loki-pods'
      kubernetes_sd_configs:
        - role: pod
      # 筛选带有 Loki 标签的 Pod
      relabel_configs:
        # 保留标签为 app.kubernetes.io/name=loki 的 Pod
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
          regex: loki
          action: keep
        # 保留标签为 app.kubernetes.io/component 且值匹配 Loki 组件的 Pod（如 distributor/ingester/querier 等）
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
          regex: (distributor|ingester|querier|query-frontend|compactor|table-manager)
          action: keep
        # 从 Pod 注解中获取 metrics 路径（默认 /metrics）
        - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
          regex: (.+)
          target_label: __metrics_path__
          action: replace
        # 从 Pod 注解中获取 metrics 端口（默认 3100）
        - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
          target_label: __address__
        # 添加命名空间标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        # 添加 Pod 名称标签
        - source_labels: [__meta_kubernetes_pod_name]
          target_label: kubernetes_pod_name
        # 添加组件类型标签（如 distributor/ingester）
        - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_component]
          target_label: loki_component

    # 抓取 Loki Service 的监控指标（适用于通过 Service 暴露的集群内组件）
    - job_name: 'loki-services'
      kubernetes_sd_configs:
        - role: service
      # 筛选带有 Loki 标签的 Service
      relabel_configs:
        # 保留标签为 app.kubernetes.io/name=loki 的 Service
        - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_name]
          regex: loki
          action: keep
        # 保留标签为 app.kubernetes.io/component 且值匹配 Loki 组件的 Service
        - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_component]
          regex: (distributor|ingester|querier|query-frontend|compactor|table-manager)
          action: keep
        # 仅抓取暴露了 metrics 端口的 Service（默认端口名 http-metrics 或 3100）
        - source_labels: [__meta_kubernetes_service_port_name]
          regex: (http-metrics|metrics|3100)
          action: keep
        # 添加命名空间标签
        - source_labels: [__meta_kubernetes_namespace]
          target_label: kubernetes_namespace
        # 添加 Service 名称标签
        - source_labels: [__meta_kubernetes_service_name]
          target_label: kubernetes_service_name
        # 添加组件类型标签
        - source_labels: [__meta_kubernetes_service_label_app_kubernetes_io_component]
          target_label: loki_component

grafana:
  defaultDashboardsTimezone: utc
  persistence:
    enabled: true  # 开启Grafana持久化
    storageClassName: "longhorn"  # 使用longhorn存储类
    accessModes: ["ReadWriteOnce"]
    size: 10Gi  # Grafana存储容量
    # existingClaim: ""  # 若使用已有PVC，可取消注释并指定名称

nodeExporter:
  enabled: false

kubeStateMetrics:
  enabled: false # 改用 Alloy 采集 Kubernetes 资源状态